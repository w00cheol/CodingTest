def solution(board, skills): #O(N*M) and O(1) (in-space)
    answer = 0

    for r in range(len(board)):
        for c in range(len(board[0]) - 1, 0, -1):
            board[r][c] -= board[r][c - 1]

    for c in range(len(board[0])):
        for r in range(len(board) - 1, 0, -1):
            board[r][c] -= board[r - 1][c]

    for r in range(len(board)):
        board[r].append(0)
    board.append([0 for _ in range(len(board[0]))])

    for skill in skills:
        if skill[0] == 1: # attack
            board[skill[1]][skill[2]] -= skill[5]
            board[skill[1]][skill[4] + 1] += skill[5]
            board[skill[3] + 1][skill[2]] += skill[5]
            board[skill[3] + 1][skill[4] + 1] -= skill[5]
        else: # heal
            board[skill[1]][skill[2]] += skill[5]
            board[skill[1]][skill[4] + 1] -= skill[5]
            board[skill[3] + 1][skill[2]] -= skill[5]
            board[skill[3] + 1][skill[4] + 1] += skill[5]

    for c in range(1, len(board[0])):
        board[0][c] += board[0][c - 1]
        
    for r in range(1, len(board)):
        board[r][0] += board[r - 1][0]
        
    for r in range(1, len(board)):
        for c in range(1, len(board[0])):
            board[r][c] += (board[r - 1][c] + board[r][c - 1] - board[r - 1][c - 1])

    for r in range(len(board) - 1):
        for c in range(len(board[0]) - 1):
            if board[r][c] > 0:
                answer += 1

    return answer