def solution(board, skills): #O(N*M) and O(1) (in-space)
    answer = 0
    running_sum = [[0 for _ in range(len(board[0]) + 1)] for _ in range(len(board) + 1)]
    
    for skill in skills:
        if skill[0] == 1: # attack
            running_sum[skill[1]][skill[2]] -= skill[5]
            running_sum[skill[1]][skill[4] + 1] += skill[5]
            running_sum[skill[3] + 1][skill[2]] += skill[5]
            running_sum[skill[3] + 1][skill[4] + 1] -= skill[5]
        else: # heal
            running_sum[skill[1]][skill[2]] += skill[5]
            running_sum[skill[1]][skill[4] + 1] -= skill[5]
            running_sum[skill[3] + 1][skill[2]] -= skill[5]
            running_sum[skill[3] + 1][skill[4] + 1] += skill[5]

    for c in range(1, len(running_sum[0])):
        running_sum[0][c] += running_sum[0][c - 1]
        
    for r in range(1, len(running_sum)):
        running_sum[r][0] += running_sum[r - 1][0]
        
    for r in range(1, len(running_sum)):
        for c in range(1, len(running_sum[0])):
            running_sum[r][c] += (running_sum[r - 1][c] + running_sum[r][c - 1] - running_sum[r - 1][c - 1])

    for r in range(len(board)):
        for c in range(len(board[0])):
            if board[r][c] + running_sum[r][c] > 0:
                answer += 1

    return answer